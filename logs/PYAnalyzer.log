2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - __init__
2025-01-03 12:39:45 - PYAnalyzer - INFO - 116
2025-01-03 12:39:45 - PYAnalyzer - INFO - 356
2025-01-03 12:39:45 - PYAnalyzer - INFO - __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - add
2025-01-03 12:39:45 - PYAnalyzer - INFO - 366
2025-01-03 12:39:45 - PYAnalyzer - INFO - 691
2025-01-03 12:39:45 - PYAnalyzer - INFO - add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - subtract
2025-01-03 12:39:45 - PYAnalyzer - INFO - 701
2025-01-03 12:39:45 - PYAnalyzer - INFO - 1048
2025-01-03 12:39:45 - PYAnalyzer - INFO - subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - multiply
2025-01-03 12:39:45 - PYAnalyzer - INFO - 1058
2025-01-03 12:39:45 - PYAnalyzer - INFO - 1400
2025-01-03 12:39:45 - PYAnalyzer - INFO - multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - divide
2025-01-03 12:39:45 - PYAnalyzer - INFO - 1410
2025-01-03 12:39:45 - PYAnalyzer - INFO - 1908
2025-01-03 12:39:45 - PYAnalyzer - INFO - divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - get_value
2025-01-03 12:39:45 - PYAnalyzer - INFO - 1918
2025-01-03 12:39:45 - PYAnalyzer - INFO - 2101
2025-01-03 12:39:45 - PYAnalyzer - INFO - get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (integer))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - __init__
2025-01-03 12:39:45 - PYAnalyzer - INFO - Calculator
2025-01-03 12:39:45 - PYAnalyzer - INFO - 6
2025-01-03 12:39:45 - PYAnalyzer - INFO - 2101
2025-01-03 12:39:45 - PYAnalyzer - INFO - Calculator:
    """
    A simple Calculator class that performs basic arithmetic operations.
    """

    def __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value

    def add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value

    def subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value

    def multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value

    def divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value

    def get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:39:45 - PYAnalyzer - INFO - foo
2025-01-03 12:39:45 - PYAnalyzer - INFO - 4
2025-01-03 12:39:45 - PYAnalyzer - INFO - 36
2025-01-03 12:39:45 - PYAnalyzer - INFO - foo():
    """Helleo"""
    pass
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - None
2025-01-03 12:39:45 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:39:45 - PYAnalyzer - INFO - bar
2025-01-03 12:39:45 - PYAnalyzer - INFO - 43
2025-01-03 12:39:45 - PYAnalyzer - INFO - 70
2025-01-03 12:39:45 - PYAnalyzer - INFO - bar(a, b):
    return a + b
2025-01-03 12:39:47 - PYAnalyzer - INFO - Return the sum of a and b.
2025-01-03 12:39:47 - PYAnalyzer - INFO - bar(a, b):
    '''
    Return the sum of a and b.
    '''
    return a + b
2025-01-03 12:39:47 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    '''
    Return the sum of a and b.
    '''
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b


2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:39:47 - PYAnalyzer - INFO - foo
2025-01-03 12:39:47 - PYAnalyzer - INFO - 93
2025-01-03 12:39:47 - PYAnalyzer - INFO - 133
2025-01-03 12:39:47 - PYAnalyzer - INFO - foo():
        """Helleo"""
        pass
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:39:47 - PYAnalyzer - INFO - bar
2025-01-03 12:39:47 - PYAnalyzer - INFO - 144
2025-01-03 12:39:47 - PYAnalyzer - INFO - 175
2025-01-03 12:39:47 - PYAnalyzer - INFO - bar(a, b):
        return a + b
2025-01-03 12:39:47 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:39:47 - PYAnalyzer - INFO - bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b
2025-01-03 12:39:47 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b


2025-01-03 12:39:47 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:47 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:39:47 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - (block (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (binary_operator left: (identifier) right: (identifier))))))
2025-01-03 12:39:47 - PYAnalyzer - INFO - None
2025-01-03 12:39:47 - PYAnalyzer - INFO - foo
2025-01-03 12:39:47 - PYAnalyzer - INFO - Test
2025-01-03 12:39:47 - PYAnalyzer - INFO - 79
2025-01-03 12:39:47 - PYAnalyzer - INFO - 175
2025-01-03 12:39:47 - PYAnalyzer - INFO - Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - __init__
2025-01-03 12:40:42 - PYAnalyzer - INFO - 116
2025-01-03 12:40:42 - PYAnalyzer - INFO - 356
2025-01-03 12:40:42 - PYAnalyzer - INFO - __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - add
2025-01-03 12:40:42 - PYAnalyzer - INFO - 366
2025-01-03 12:40:42 - PYAnalyzer - INFO - 691
2025-01-03 12:40:42 - PYAnalyzer - INFO - add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - subtract
2025-01-03 12:40:42 - PYAnalyzer - INFO - 701
2025-01-03 12:40:42 - PYAnalyzer - INFO - 1048
2025-01-03 12:40:42 - PYAnalyzer - INFO - subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - multiply
2025-01-03 12:40:42 - PYAnalyzer - INFO - 1058
2025-01-03 12:40:42 - PYAnalyzer - INFO - 1400
2025-01-03 12:40:42 - PYAnalyzer - INFO - multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - divide
2025-01-03 12:40:42 - PYAnalyzer - INFO - 1410
2025-01-03 12:40:42 - PYAnalyzer - INFO - 1908
2025-01-03 12:40:42 - PYAnalyzer - INFO - divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - get_value
2025-01-03 12:40:42 - PYAnalyzer - INFO - 1918
2025-01-03 12:40:42 - PYAnalyzer - INFO - 2101
2025-01-03 12:40:42 - PYAnalyzer - INFO - get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (integer))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - __init__
2025-01-03 12:40:42 - PYAnalyzer - INFO - Calculator
2025-01-03 12:40:42 - PYAnalyzer - INFO - 6
2025-01-03 12:40:42 - PYAnalyzer - INFO - 2101
2025-01-03 12:40:42 - PYAnalyzer - INFO - Calculator:
    """
    A simple Calculator class that performs basic arithmetic operations.
    """

    def __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value

    def add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value

    def subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value

    def multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value

    def divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value

    def get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:40:42 - PYAnalyzer - INFO - foo
2025-01-03 12:40:42 - PYAnalyzer - INFO - 4
2025-01-03 12:40:42 - PYAnalyzer - INFO - 36
2025-01-03 12:40:42 - PYAnalyzer - INFO - foo():
    """Helleo"""
    pass
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - None
2025-01-03 12:40:42 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:40:42 - PYAnalyzer - INFO - bar
2025-01-03 12:40:42 - PYAnalyzer - INFO - 43
2025-01-03 12:40:42 - PYAnalyzer - INFO - 70
2025-01-03 12:40:42 - PYAnalyzer - INFO - bar(a, b):
    return a + b
2025-01-03 12:40:44 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:40:44 - PYAnalyzer - INFO - bar(a, b):
    '''
    Return the sum of two numbers.
    '''
    return a + b
2025-01-03 12:40:44 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    '''
    Return the sum of two numbers.
    '''
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b


2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:40:44 - PYAnalyzer - INFO - foo
2025-01-03 12:40:44 - PYAnalyzer - INFO - 93
2025-01-03 12:40:44 - PYAnalyzer - INFO - 133
2025-01-03 12:40:44 - PYAnalyzer - INFO - foo():
        """Helleo"""
        pass
2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - None
2025-01-03 12:40:44 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:40:44 - PYAnalyzer - INFO - bar
2025-01-03 12:40:44 - PYAnalyzer - INFO - 144
2025-01-03 12:40:44 - PYAnalyzer - INFO - 175
2025-01-03 12:40:44 - PYAnalyzer - INFO - bar(a, b):
        return a + b
2025-01-03 12:40:45 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:40:45 - PYAnalyzer - INFO - bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b
2025-01-03 12:40:45 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b


2025-01-03 12:40:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:40:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:40:45 - PYAnalyzer - INFO - None
2025-01-03 12:40:45 - PYAnalyzer - INFO - (block (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (binary_operator left: (identifier) right: (identifier))))))
2025-01-03 12:40:45 - PYAnalyzer - INFO - None
2025-01-03 12:40:45 - PYAnalyzer - INFO - foo
2025-01-03 12:40:45 - PYAnalyzer - INFO - Test
2025-01-03 12:40:45 - PYAnalyzer - INFO - 79
2025-01-03 12:40:45 - PYAnalyzer - INFO - 175
2025-01-03 12:40:45 - PYAnalyzer - INFO - Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - __init__
2025-01-03 12:41:43 - PYAnalyzer - INFO - 116
2025-01-03 12:41:43 - PYAnalyzer - INFO - 356
2025-01-03 12:41:43 - PYAnalyzer - INFO - __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - add
2025-01-03 12:41:43 - PYAnalyzer - INFO - 366
2025-01-03 12:41:43 - PYAnalyzer - INFO - 691
2025-01-03 12:41:43 - PYAnalyzer - INFO - add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - subtract
2025-01-03 12:41:43 - PYAnalyzer - INFO - 701
2025-01-03 12:41:43 - PYAnalyzer - INFO - 1048
2025-01-03 12:41:43 - PYAnalyzer - INFO - subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - multiply
2025-01-03 12:41:43 - PYAnalyzer - INFO - 1058
2025-01-03 12:41:43 - PYAnalyzer - INFO - 1400
2025-01-03 12:41:43 - PYAnalyzer - INFO - multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - divide
2025-01-03 12:41:43 - PYAnalyzer - INFO - 1410
2025-01-03 12:41:43 - PYAnalyzer - INFO - 1908
2025-01-03 12:41:43 - PYAnalyzer - INFO - divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - get_value
2025-01-03 12:41:43 - PYAnalyzer - INFO - 1918
2025-01-03 12:41:43 - PYAnalyzer - INFO - 2101
2025-01-03 12:41:43 - PYAnalyzer - INFO - get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (integer))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - __init__
2025-01-03 12:41:43 - PYAnalyzer - INFO - Calculator
2025-01-03 12:41:43 - PYAnalyzer - INFO - 6
2025-01-03 12:41:43 - PYAnalyzer - INFO - 2101
2025-01-03 12:41:43 - PYAnalyzer - INFO - Calculator:
    """
    A simple Calculator class that performs basic arithmetic operations.
    """

    def __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value

    def add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value

    def subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value

    def multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value

    def divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value

    def get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:41:43 - PYAnalyzer - INFO - foo
2025-01-03 12:41:43 - PYAnalyzer - INFO - 4
2025-01-03 12:41:43 - PYAnalyzer - INFO - 36
2025-01-03 12:41:43 - PYAnalyzer - INFO - foo():
    """Helleo"""
    pass
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - None
2025-01-03 12:41:43 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:41:43 - PYAnalyzer - INFO - bar
2025-01-03 12:41:43 - PYAnalyzer - INFO - 43
2025-01-03 12:41:43 - PYAnalyzer - INFO - 70
2025-01-03 12:41:43 - PYAnalyzer - INFO - bar(a, b):
    return a + b
2025-01-03 12:41:44 - PYAnalyzer - INFO - Return the sum of a and b.
2025-01-03 12:41:44 - PYAnalyzer - INFO - bar(a, b):
    '''
    Return the sum of a and b.
    '''
    return a + b
2025-01-03 12:41:44 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    '''
    Return the sum of a and b.
    '''
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b


2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:41:44 - PYAnalyzer - INFO - foo
2025-01-03 12:41:44 - PYAnalyzer - INFO - 93
2025-01-03 12:41:44 - PYAnalyzer - INFO - 133
2025-01-03 12:41:44 - PYAnalyzer - INFO - foo():
        """Helleo"""
        pass
2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - None
2025-01-03 12:41:44 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:41:44 - PYAnalyzer - INFO - bar
2025-01-03 12:41:44 - PYAnalyzer - INFO - 144
2025-01-03 12:41:44 - PYAnalyzer - INFO - 175
2025-01-03 12:41:44 - PYAnalyzer - INFO - bar(a, b):
        return a + b
2025-01-03 12:41:45 - PYAnalyzer - INFO - Return the sum of a and b.
2025-01-03 12:41:45 - PYAnalyzer - INFO - bar(a, b):
        '''
        Return the sum of a and b.
        '''
        return a + b
2025-01-03 12:41:45 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        '''
        Return the sum of a and b.
        '''
        return a + b


2025-01-03 12:41:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:45 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:41:45 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:41:45 - PYAnalyzer - INFO - None
2025-01-03 12:41:45 - PYAnalyzer - INFO - (block (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (binary_operator left: (identifier) right: (identifier))))))
2025-01-03 12:41:45 - PYAnalyzer - INFO - None
2025-01-03 12:41:45 - PYAnalyzer - INFO - foo
2025-01-03 12:41:45 - PYAnalyzer - INFO - Test
2025-01-03 12:41:45 - PYAnalyzer - INFO - 79
2025-01-03 12:41:45 - PYAnalyzer - INFO - 175
2025-01-03 12:41:45 - PYAnalyzer - INFO - Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - __init__
2025-01-03 12:48:04 - PYAnalyzer - INFO - 116
2025-01-03 12:48:04 - PYAnalyzer - INFO - 356
2025-01-03 12:48:04 - PYAnalyzer - INFO - __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - add
2025-01-03 12:48:04 - PYAnalyzer - INFO - 366
2025-01-03 12:48:04 - PYAnalyzer - INFO - 691
2025-01-03 12:48:04 - PYAnalyzer - INFO - add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - subtract
2025-01-03 12:48:04 - PYAnalyzer - INFO - 701
2025-01-03 12:48:04 - PYAnalyzer - INFO - 1048
2025-01-03 12:48:04 - PYAnalyzer - INFO - subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - multiply
2025-01-03 12:48:04 - PYAnalyzer - INFO - 1058
2025-01-03 12:48:04 - PYAnalyzer - INFO - 1400
2025-01-03 12:48:04 - PYAnalyzer - INFO - multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - divide
2025-01-03 12:48:04 - PYAnalyzer - INFO - 1410
2025-01-03 12:48:04 - PYAnalyzer - INFO - 1908
2025-01-03 12:48:04 - PYAnalyzer - INFO - divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - get_value
2025-01-03 12:48:04 - PYAnalyzer - INFO - 1918
2025-01-03 12:48:04 - PYAnalyzer - INFO - 2101
2025-01-03 12:48:04 - PYAnalyzer - INFO - get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (integer))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - __init__
2025-01-03 12:48:04 - PYAnalyzer - INFO - Calculator
2025-01-03 12:48:04 - PYAnalyzer - INFO - 6
2025-01-03 12:48:04 - PYAnalyzer - INFO - 2101
2025-01-03 12:48:04 - PYAnalyzer - INFO - Calculator:
    """
    A simple Calculator class that performs basic arithmetic operations.
    """

    def __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value

    def add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value

    def subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value

    def multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value

    def divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value

    def get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:48:04 - PYAnalyzer - INFO - foo
2025-01-03 12:48:04 - PYAnalyzer - INFO - 4
2025-01-03 12:48:04 - PYAnalyzer - INFO - 36
2025-01-03 12:48:04 - PYAnalyzer - INFO - foo():
    """Helleo"""
    pass
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - None
2025-01-03 12:48:04 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:48:04 - PYAnalyzer - INFO - bar
2025-01-03 12:48:04 - PYAnalyzer - INFO - 43
2025-01-03 12:48:04 - PYAnalyzer - INFO - 70
2025-01-03 12:48:04 - PYAnalyzer - INFO - bar(a, b):
    return a + b
2025-01-03 12:48:05 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:48:05 - PYAnalyzer - INFO - bar(a, b):
    '''
    Return the sum of two numbers.
    '''
    return a + b
2025-01-03 12:48:05 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    '''
    Return the sum of two numbers.
    '''
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b


2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:48:05 - PYAnalyzer - INFO - foo
2025-01-03 12:48:05 - PYAnalyzer - INFO - 93
2025-01-03 12:48:05 - PYAnalyzer - INFO - 133
2025-01-03 12:48:05 - PYAnalyzer - INFO - foo():
        """Helleo"""
        pass
2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - None
2025-01-03 12:48:05 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:48:05 - PYAnalyzer - INFO - bar
2025-01-03 12:48:05 - PYAnalyzer - INFO - 144
2025-01-03 12:48:05 - PYAnalyzer - INFO - 175
2025-01-03 12:48:05 - PYAnalyzer - INFO - bar(a, b):
        return a + b
2025-01-03 12:48:06 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:48:06 - PYAnalyzer - INFO - bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b
2025-01-03 12:48:06 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b


2025-01-03 12:48:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:48:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:48:06 - PYAnalyzer - INFO - None
2025-01-03 12:48:06 - PYAnalyzer - INFO - (block (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (binary_operator left: (identifier) right: (identifier))))))
2025-01-03 12:48:06 - PYAnalyzer - INFO - None
2025-01-03 12:48:06 - PYAnalyzer - INFO - foo
2025-01-03 12:48:06 - PYAnalyzer - INFO - Test
2025-01-03 12:48:06 - PYAnalyzer - INFO - 79
2025-01-03 12:48:06 - PYAnalyzer - INFO - 175
2025-01-03 12:48:06 - PYAnalyzer - INFO - Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - __init__
2025-01-03 12:55:06 - PYAnalyzer - INFO - 116
2025-01-03 12:55:06 - PYAnalyzer - INFO - 356
2025-01-03 12:55:06 - PYAnalyzer - INFO - __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - add
2025-01-03 12:55:06 - PYAnalyzer - INFO - 366
2025-01-03 12:55:06 - PYAnalyzer - INFO - 691
2025-01-03 12:55:06 - PYAnalyzer - INFO - add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - subtract
2025-01-03 12:55:06 - PYAnalyzer - INFO - 701
2025-01-03 12:55:06 - PYAnalyzer - INFO - 1048
2025-01-03 12:55:06 - PYAnalyzer - INFO - subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - multiply
2025-01-03 12:55:06 - PYAnalyzer - INFO - 1058
2025-01-03 12:55:06 - PYAnalyzer - INFO - 1400
2025-01-03 12:55:06 - PYAnalyzer - INFO - multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - divide
2025-01-03 12:55:06 - PYAnalyzer - INFO - 1410
2025-01-03 12:55:06 - PYAnalyzer - INFO - 1908
2025-01-03 12:55:06 - PYAnalyzer - INFO - divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - get_value
2025-01-03 12:55:06 - PYAnalyzer - INFO - 1918
2025-01-03 12:55:06 - PYAnalyzer - INFO - 2101
2025-01-03 12:55:06 - PYAnalyzer - INFO - get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (integer))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (attribute object: (identifier) attribute: (identifier))))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - __init__
2025-01-03 12:55:06 - PYAnalyzer - INFO - Calculator
2025-01-03 12:55:06 - PYAnalyzer - INFO - 6
2025-01-03 12:55:06 - PYAnalyzer - INFO - 2101
2025-01-03 12:55:06 - PYAnalyzer - INFO - Calculator:
    """
    A simple Calculator class that performs basic arithmetic operations.
    """

    def __init__(self, value=0):
        """
        Initializes the calculator with an initial value.
        
        Args:
            value (int, float): The initial value of the calculator. Defaults to 0.
        """
        self.value = value

    def add(self, number):
        """
        Adds the given number to the current value.
        
        Args:
            number (int, float): The number to be added to the current value.
        
        Returns:
            float: The new value after addition.
        """
        self.value += number
        return self.value

    def subtract(self, number):
        """
        Subtracts the given number from the current value.
        
        Args:
            number (int, float): The number to be subtracted from the current value.
        
        Returns:
            float: The new value after subtraction.
        """
        self.value -= number
        return self.value

    def multiply(self, number):
        """
        Multiplies the current value by the given number.
        
        Args:
            number (int, float): The number to multiply the current value by.
        
        Returns:
            float: The new value after multiplication.
        """
        self.value *= number
        return self.value

    def divide(self, number):
        """
        Divides the current value by the given number.
        
        Args:
            number (int, float): The number to divide the current value by.
        
        Returns:
            float: The new value after division.
        
        Raises:
            ValueError: If an attempt is made to divide by zero.
        """
        if number == 0:
            raise ValueError("Cannot divide by zero.")
        self.value /= number
        return self.value

    def get_value(self):
        """
        Returns the current value of the calculator.
        
        Returns:
            float: The current value.
        """
        return self.value
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:55:06 - PYAnalyzer - INFO - foo
2025-01-03 12:55:06 - PYAnalyzer - INFO - 4
2025-01-03 12:55:06 - PYAnalyzer - INFO - 36
2025-01-03 12:55:06 - PYAnalyzer - INFO - foo():
    """Helleo"""
    pass
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - None
2025-01-03 12:55:06 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:55:06 - PYAnalyzer - INFO - bar
2025-01-03 12:55:06 - PYAnalyzer - INFO - 43
2025-01-03 12:55:06 - PYAnalyzer - INFO - 70
2025-01-03 12:55:06 - PYAnalyzer - INFO - bar(a, b):
    return a + b
2025-01-03 12:55:07 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:55:07 - PYAnalyzer - INFO - bar(a, b):
    '''
    Return the sum of two numbers.
    '''
    return a + b
2025-01-03 12:55:07 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    '''
    Return the sum of two numbers.
    '''
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b


2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))
2025-01-03 12:55:07 - PYAnalyzer - INFO - foo
2025-01-03 12:55:07 - PYAnalyzer - INFO - 93
2025-01-03 12:55:07 - PYAnalyzer - INFO - 133
2025-01-03 12:55:07 - PYAnalyzer - INFO - foo():
        """Helleo"""
        pass
2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - None
2025-01-03 12:55:07 - PYAnalyzer - INFO - (block (return_statement (binary_operator left: (identifier) right: (identifier))))
2025-01-03 12:55:07 - PYAnalyzer - INFO - bar
2025-01-03 12:55:07 - PYAnalyzer - INFO - 144
2025-01-03 12:55:07 - PYAnalyzer - INFO - 175
2025-01-03 12:55:07 - PYAnalyzer - INFO - bar(a, b):
        return a + b
2025-01-03 12:55:08 - PYAnalyzer - INFO - Return the sum of two numbers.
2025-01-03 12:55:08 - PYAnalyzer - INFO - bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b
2025-01-03 12:55:08 - PYAnalyzer - INFO - def foo():
    """Helleo"""
    pass


def bar(a, b):
    return a + b


class Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        '''
        Return the sum of two numbers.
        '''
        return a + b


2025-01-03 12:55:08 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:08 - PYAnalyzer - INFO - (identifier)
2025-01-03 12:55:08 - PYAnalyzer - INFO - (string (string_start) (string_content) (string_end))
2025-01-03 12:55:08 - PYAnalyzer - INFO - None
2025-01-03 12:55:08 - PYAnalyzer - INFO - (block (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (binary_operator left: (identifier) right: (identifier))))))
2025-01-03 12:55:08 - PYAnalyzer - INFO - None
2025-01-03 12:55:08 - PYAnalyzer - INFO - foo
2025-01-03 12:55:08 - PYAnalyzer - INFO - Test
2025-01-03 12:55:08 - PYAnalyzer - INFO - 79
2025-01-03 12:55:08 - PYAnalyzer - INFO - 175
2025-01-03 12:55:08 - PYAnalyzer - INFO - Test:
    def foo():
        """Helleo"""
        pass


    def bar(a, b):
        return a + b
